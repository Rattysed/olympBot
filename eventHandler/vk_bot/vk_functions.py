from vk_api.utils import get_random_id
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from eventHandler.db_controller import *
from typing import List, Union
from vk_api import VkApi
import os

TOKEN = os.environ['TOKEN']


class Command:
    def __init__(self, title, action, vk_keyboard: VkKeyboard = None, keyword=''):
        self.title = title
        self.action = action
        self.keyword = keyword
        self.tg_keyboard = None
        self.vk_keyboard = vk_keyboard

    def reply(self, sender, auth, vk=True, **kwargs):
        # TODO: –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º –∑–¥–µ—Å—å
        message = ''
        print(kwargs)
        print(kwargs.get('toggle_start', False))
        if kwargs.get('huynya_ebanaya', False):
            pass
        elif kwargs.get('toggle_start', False):
            if kwargs.get('remove', False):
                message = self.action(sender, kwargs.get('chosen_option', -1), remove=True)
            else:
                message = self.action(sender, kwargs.get('chosen_option', -1))
        elif kwargs.get('vk_id', False):
            message = self.action(sender)
        else:
            message = self.action()
        if vk:
            vk_write_message(sender, auth, message, keyboard=self.vk_keyboard)
        else:
            pass


keyboard_menu = VkKeyboard(one_time=False)
keyboard_menu.add_button('–¢–µ–∫—É—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', color=VkKeyboardColor.PRIMARY)
keyboard_menu.add_line()
keyboard_menu.add_button('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π', color=VkKeyboardColor.PRIMARY)
keyboard_menu.add_line()
keyboard_menu.add_button('üîî', color=VkKeyboardColor.SECONDARY)
keyboard_menu.add_button('üîï', color=VkKeyboardColor.SECONDARY)

keyboard_send_menu = VkKeyboard(one_time=False)
keyboard_send_menu.add_button('–ú–µ–Ω—é', color=VkKeyboardColor.PRIMARY)

keyboard_choose = VkKeyboard(one_time=False)
keyboard_choose.add_button('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', color=VkKeyboardColor.SECONDARY)
keyboard_choose.add_button('–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', color=VkKeyboardColor.SECONDARY)
keyboard_choose.add_line()
keyboard_choose.add_button('–ú–µ–Ω—é', color=VkKeyboardColor.PRIMARY)

keyboard_notif = VkKeyboard(one_time=False)
keyboard_notif.add_button('–ú–æ–∏ —Ä–∞—Å—Å—ã–ª–∫–∏', color=VkKeyboardColor.PRIMARY)
keyboard_notif.add_line()
keyboard_notif.add_button('–î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å', color=VkKeyboardColor.POSITIVE)
keyboard_notif.add_button('–£–±—Ä–∞—Ç—å', color=VkKeyboardColor.NEGATIVE)
keyboard_notif.add_line()
keyboard_notif.add_button('–°–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å', color=VkKeyboardColor.SECONDARY)
keyboard_notif.add_button('–ú–µ–Ω—é', color=VkKeyboardColor.PRIMARY)

keyboard_grades = VkKeyboard(one_time=False)
keyboard_grades.add_button('11', color=VkKeyboardColor.SECONDARY)
keyboard_grades.add_button('10', color=VkKeyboardColor.SECONDARY)
keyboard_grades.add_line()
keyboard_grades.add_button('9', color=VkKeyboardColor.SECONDARY)
keyboard_grades.add_button('8', color=VkKeyboardColor.SECONDARY)

keyboard_warning = VkKeyboard(one_time=False)
keyboard_warning.add_button('–î–∞', color=VkKeyboardColor.POSITIVE)
keyboard_warning.add_button('–ù–∞–∑–∞–¥', color=VkKeyboardColor.NEGATIVE)


def vk_write_message(sender, auth, message,
                     keyboard: VkKeyboard = None):  # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è message –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é sender
    message_data = {'user_id': sender, 'message': message,
                    'random_id': get_random_id()}
    if keyboard is not None:
        message_data['keyboard'] = keyboard.get_keyboard()
    auth.method('messages.send', message_data)


def ask_about_grades():
    return '–í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —Ç—ã —É—á–∏—à—å—Å—è?'


def send_menu():  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é
    return '(–¢—É—Ç –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞)'


def error_message():
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!'


def notifications():  # –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    return '–ö—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–æ–ø–æ—á–µ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏'


def subject_notification():
    all_subs = DATA.subjects[:]
    output = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∏–∂–µ:\n\n'
    i = 1
    for sub in all_subs:
        output += str(i) + ') ' + str(sub) + '\n'
        i += 1
    output += '\n(–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —Ü–∏—Ñ—Ä—É)'
    return output


def show_distributions(sender):
    events_of_user = get_events_of_user(sender)
    print(events_of_user)
    is_dist = is_distribution(sender)
    output = '–í–∞—à–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n'
    if not is_dist:
        output += '‚ùó–í–Ω–∏–º–∞–Ω–∏–µ: –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.' \
                  ' –ß—Ç–æ–±—ã –µ–µ –≤–∫–ª—é—á–∏—Ç—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ ' \
                  '–≤ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîî" \n\n'
    if len(events_of_user.keys()) == 0:
        output = '–†–∞—Å—Å—ã–ª–æ–∫ –Ω–µ—Ç.'
    for sub in DATA.subjects[:]:
        evs = events_of_user.get(sub.name, [])
        print(evs)
        if len(evs) == 0:
            continue
        output += f'{sub.name}:\n'
        for num, ev in enumerate(evs):
            output += f'\t{num + 1}) {ev.name}\n'
    return output


def send_info(senders, message, auth):  # –§–£–ù–ö–¶–ò–Ø –†–ê–°–°–´–õ–ö–ò
    for sender in senders:
        auth.method('messages.send', {'user_id': sender, 'message': message,
                                      'random_id': get_random_id()})


def test_action(vk_id='', tg_id=''):
    return '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞'


def make_distribution():
    auth = VkApi(token=TOKEN)
    for cur_grade in [11, 10, 9]:
        subevents = get_all_this_grade_today(cur_grade)
        for sub in subevents:
            users = sub.user_set.all()
            tg_users = set()
            vk_users = set()
            for user in users:
                tg_users.add(user.tg_id)
                vk_users.add(user.vk_id)
            message = f"""–û–ª–∏–º–ø–∏–∞–¥–∞ "{sub.name}"\n–ö–ª–∞—Å—Å: {str(sub.grade)}
–°—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {sub.period}
–ü—Ä–µ–¥–º–µ—Ç—ã: {' '.join([x['name'] for x in sub.main_event.subject.values('name')])}
–ü—Ä–æ—Ñ–∏–ª—å: {sub.main_event.profile}
–£—Ä–æ–≤–µ–Ω—å –æ–ª–∏–º–ø–∏–∞–¥—ã: {sub.main_event.level}
–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ–ª–∏–º–ø–∏–∞–¥–µ: {sub.main_event.url}"""
            send_info(vk_users, message, auth)


def set_up_next_event(event: Event):
    if event.next_event_id is None:
        return
    sub_events = event.subevent_set.all()
    grade_to_event = dict()
    for ev in sub_events:
        grade_to_event[ev.grade] = ev
    next_event = event.next_event_id
    next_sub_events = next_event.subevent_set.all()
    for ev in next_sub_events:
        last_ev = grade_to_event.get(ev.grade, None)
        if last_ev is None:
            continue  # TODO: –ü—Ä–∏–¥—É–º–∞—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å, –∫–æ–≥–¥–∞ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —ç–≤–µ–Ω—Ç–∞ –ø–æ–¥ –∫–ª–∞—Å—Å
        for user in last_ev.user_set.all():
            ev.user_set.add(user)
    event.is_visible = False
    next_event.is_visible = True
    event.save()
    next_event.save()


def toggle_distribution(user_id: int, chosen_subject: int, **kwargs):
    user = get_user(vk_id=str(user_id))
    subject = DATA.subjects[chosen_subject - 1]
    events = get_subevents_by_subject_and_grade(str(user_id), subject)
    is_remove = kwargs.get('remove', False)
    if not is_remove:
        output = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:\n\n1) –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ\n2) –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ\n"
        for n, ev in enumerate(events):
            output += f"{n + 3}) {ev.name}"
            if user.events.filter(id=ev.id):
                output += ' ‚úÖ\n'
            else:
                output += ' üö´\n'
        is_dist = is_distribution(user_id)
        if not is_dist:
            output += '\n‚ùó–í–Ω–∏–º–∞–Ω–∏–µ: –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.' \
                      ' –ß—Ç–æ–±—ã –µ–µ –≤–∫–ª—é—á–∏—Ç—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ ' \
                      '–≤ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîî" \n\n'
        return output
    else:
        n = 1
        output = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö (–≤—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏):\n\n'
        for ev in events:
            if user.events.filter(id=ev.id):
                output += f"{n}) {ev.name}"
                output += ' ‚úÖ\n'
                n += 1
        if n == 1:
            return '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É.'
        is_dist = is_distribution(user_id)
        if not is_dist:
            output += '\n‚ùó–í–Ω–∏–º–∞–Ω–∏–µ: –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.' \
                      ' –ß—Ç–æ–±—ã –µ–µ –≤–∫–ª—é—á–∏—Ç—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ ' \
                      '–≤ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîî" \n\n'
        return output


COMMANDS_DICT = {
    '—Ç–µ—Å—Ç': Command('—Ç–µ—Å—Ç', action=test_action, keyword='—Ç–µ—Å—Ç'),
    '—Å–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å': Command('ask_about_grades', action=ask_about_grades, vk_keyboard=keyboard_grades),
    '–º–µ–Ω—é': Command('menu', action=send_menu, vk_keyboard=keyboard_menu),
    'wrong': Command('error', action=error_message),
    '–∏–∑–º–µ–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º': Command('change_notification_sub', action=subject_notification,
                                                 vk_keyboard=keyboard_send_menu),
    'success': Command('success', action=lambda: "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", vk_keyboard=keyboard_menu),
    'failure': Command('failure', action=lambda: "–û—à–∏–±–∫–∞. –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É."),
    '–º–æ–∏ —Ä–∞—Å—Å—ã–ª–∫–∏': Command('my_distributions', action=show_distributions),
    '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É': Command('toggle_distribution', action=toggle_distribution),
    '–º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π': Command('notification_menu', action=notifications, vk_keyboard=keyboard_notif),
    '—Ä–∞–∑–¥–µ–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω': Command('permission_denied', action=lambda: '–û—à–∏–±–∫–∞. –î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª'
                                                                     ' –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏',
                                 vk_keyboard=keyboard_menu),
    '–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ': Command('waiting_for_prod', action=lambda: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è"
                                                               " –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ —Å—é–¥–∞ –ø–æ–∑–∂–µ :)",
                            vk_keyboard=keyboard_menu),
    '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ': Command('hello', action=lambda: "–¢–∏–ø–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", vk_keyboard=keyboard_menu),
    '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ': Command('warning', action=lambda: "‚ùó–í–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–ª–∞—Å—Å–∞"
                                                        " –≤—Å–µ –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ "
                                                        "—Ä–∞—Å—Å—ã–ª–∫–∏ –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã. "
                                                        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ "
                                                        "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", vk_keyboard=keyboard_warning),
}
